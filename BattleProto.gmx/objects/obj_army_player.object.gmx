<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_army_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_army</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Variables

phy_fixed_rotation = true;
alarm[0]=10;
alarm[1]=0;
alarm[2]=0;
enemyTargeting = false;
alarmFinished = false;
dir = direction;
combatAxisObject = true;
combatAxisWorld = false;
los = 150;
distanceToEnemy = 10000;
inRange = false;
nth_target=1;
switchTarget = true;
targetInRange = false;
block = false;
attackR = false;
attackL = false;
hp_current = 100;
hp_max = 100;
stamina_current = 100;
stamina_max = 100;
mana_current = 100;
mana_max = 100;
damage_melee = 20;
damage_ranged = 20;
staminaAttackR = 20;
staminaBlock = 20;
attackRange = 12;
stun = false;
stunLength = 32;
healthBarActive = false;
died = false;

dodge = false;
dodgeX = 5;
dodgeY = 3;
staminaDodge = 50;

button_attack = keyboard_check_released (ord('D'));
button_block = keyboard_check (ord('W'));
button_target = keyboard_check_pressed(vk_lshift);

//Inventory Light
weapon_sword = false;
weapon_bow = true;
itemEquip = 0;
itemEquip_max = 1;

// Movement
xAxis = 0;
yAxis = 0;
magnitude = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keyboard Controls

if (obj_player_controller.settingsOpen) || (hp_current &lt;= 0){
    phy_speed_x = 0;
    phy_speed_y = 0;
    exit;
}

if (obj_player_controller.controls_keyboard)
{

    mbLeftRelease = mouse_check_button_released(mb_left);
    mbLeftCheck = mouse_check_button(mb_left);
    vkLShiftCheck = keyboard_check_pressed(vk_lshift);
    //target = instance_nth_nearest(x,y,obj_army_enemy,nth_target);
    //enemyTargetX = instance_nearest(x, y-12, obj_enemy_targeting).x;
    //enemyTargetY = instance_nearest(x, y-12, obj_enemy_targeting).y;

    direction = point_direction(x, y, mouse_x, mouse_y);
    // Basic Movement
    if (mbLeftCheck &amp;&amp; !enemyTargeting) 
    {
        instance_create(mouse_x, mouse_y, obj_move_to_cursor);
        dir = point_direction(x, y, mouse_x, mouse_y);
        phy_speed_x = lengthdir_x(obj_player_controller.speedX, dir);
        phy_speed_y = lengthdir_y(obj_player_controller.speedY, dir);
        //direction = dir;
    }
    
    if (mbLeftRelease &amp;&amp; !enemyTargeting)
    {
        instance_create(mouse_x, mouse_y, obj_move_to_point);
        dir = point_direction(x, y, obj_move_to_point.x, obj_move_to_point.y);
        phy_speed_x = lengthdir_x(obj_player_controller.speedX, dir);
        phy_speed_y = lengthdir_y(obj_player_controller.speedY, dir);
        //direction = dir;
    }
    
    // Enemy Targeting Movement
    /*if (enemyTargeting)
    {
        if (switchTarget)
        {
            instance_create(target.x,target.y,obj_enemy_targeting);
            direction = point_direction(x, y, enemyTargetX, enemyTargetY);
            switchTarget = false;
            targetInRange = true;
            
        }
            
        // Strafing            
        if (mbLeftCheck) 
        {
            instance_create(mouse_x, mouse_y, obj_move_to_cursor);
            dir = point_direction(x, y, mouse_x, mouse_y);
            phy_speed_x = lengthdir_x(obj_player_controller.speedX, dir); //SPEED is the speed you want to move at.
            phy_speed_y = lengthdir_y(obj_player_controller.speedY, dir);
            direction = point_direction(x, y, enemyTargetX, enemyTargetY);
        }
        
        if (mbLeftRelease)
        {
            instance_create(mouse_x, mouse_y, obj_move_to_point);
            dir = point_direction(x, y, obj_move_to_point.x, obj_move_to_point.y);
            phy_speed_x = lengthdir_x(obj_player_controller.speedX, dir); //SPEED is the speed you want to move at.
            phy_speed_y = lengthdir_y(obj_player_controller.speedY, dir);
            direction = point_direction(x, y, enemyTargetX, enemyTargetY);
        }
    }*/
    
    // Target In Range
    /*if (collision_ellipse(x-(los), y-((los/2)+8), x+(los), y+((los/2)+8), target, false, true))
    {
        inRange = true;
    }
    else
    {
        inRange = false;
        nth_target = 1
    }
    
    if (collision_ellipse(x-(los), y-((los/2)+8), x+(los), y+((los/2)+8), obj_enemy_targeting, false, true))
    {
        targetInRange = true;
    }
    else
    {
        targetInRange = false;
        enemyTargeting = false;
        nth_target = 1
    }*/
        
    //Enemy Targeting
    /*if (!inRange || enemyTargeting &amp;&amp; vkLShiftCheck &amp;&amp; alarmFinished)
    {
        alarmFinished = false;
        enemyTargeting = false;
        alarm[0] = 2;
    }*/
    
    if (inRange &amp;&amp; !enemyTargeting &amp;&amp; vkLShiftCheck &amp;&amp; alarmFinished)
    {
        alarmFinished = false;
        enemyTargeting = true;
        alarm[0] = 2;
        switchTarget = true;
        nth_target = 1
        
        switch nth_target
        {
            case 1: nth_target = 1; break //switch the target between the 1st,2nd and 3rd closest enemies
            case 2: nth_target = 2; break
            case 3: nth_target = 3; break
        }
        
    }
    
    // Cycle Targets
    if (keyboard_check_pressed(ord('E')))
    {
        nth_target += 1;
        switchTarget = true;
    }
    if (keyboard_check_pressed(ord('Q')))
    {
        nth_target -= 1;        
        switchTarget = true;
    }
    if (nth_target &lt; 1) nth_target = 1;
    if (nth_target &gt; 3) nth_target = 3;
    
    
    //Stop Movement on collision with Cursor and Point
    if (collision_circle(x, y, 8, obj_move_to_point,true,true))
    {
        phy_speed_x = 0;
        phy_speed_y = 0;
    }
    if (collision_circle(x, y, 10, obj_move_to_cursor,true,true))
    {
        phy_speed_x = 0;
        phy_speed_y = 0;
    }
        
    //Sprite Directions
    /*d = (direction + 45) div 90;
    
    if (phy_speed_x = 0 &amp;&amp; phy_speed_y = 0 &amp;&amp; !attackR)
    {
        switch (d) 
        {     
            case 0: sprite_index = spr_player_idle_right; break;    
            case 1: sprite_index = spr_player_idle_up;  break;    
            case 2: sprite_index = spr_player_idle_left; break;    
            case 3: sprite_index = spr_player_idle_down;  break; 
        }
        
        if (direction &gt;= 315) sprite_index = spr_player_idle_right;
    }
    
    if ((phy_speed_x != 0 || phy_speed_y != 0) &amp;&amp; !attackR)
    {
        switch (d) 
        {     
            case 0: sprite_index = spr_player_walk_right; break;    
            case 1: sprite_index = spr_player_walk_up;  break;    
            case 2: sprite_index = spr_player_walk_left; break;    
            case 3: sprite_index = spr_player_walk_down;  break; 
        }
        
        if (direction &gt;= 315 &amp;&amp; !attackR) sprite_index = spr_player_walk_right;
    }*/
        
    //Vertical Speed Clamp
    if (phy_speed_y &gt; obj_player_controller.speedY) phy_speed_y = obj_player_controller.speedY;
    if (phy_speed_y &lt; -obj_player_controller.speedY) phy_speed_y = -obj_player_controller.speedY;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>28,88</point>
    <point>64,108</point>
    <point>28,128</point>
    <point>-8,108</point>
  </PhysicsShapePoints>
</object>
